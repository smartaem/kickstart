accepteula
reboot
 
%include /tmp/config

%pre --interpreter=busybox

exec < /dev/tty1 > /dev/tty1 2>&1
chvt 1
PROFILE_NAME=""
HOSTNAME=""
IPADDR=""
NETMASK=""
GATEWAY=""
DNS=""
VLAN_ID=""
NIC_DEVICE=""

NTPSERVER1=""
NTPSERVER2=""
DATACENTER=""
CLUSTER=""
VCENTERUSERNAME=""
HOSTPASSWORD=""
VCENTERSERVER=""
JOINVCENTER=""

CONFIGURATIONSERVER="http://server.local"

clear
cd /tmp
COUNTER=0
while [[ ! -s /tmp/configuration.cfg ]]
do
	PROFILE_NAME=""
	if [ $COUNTER -ge 1 ]
	then
		echo
		echo
		echo "*** The configuration parameters are empty for profile [${PROFILE_NAME}]. Please ensure that you specified the correct profile name for this host"
		read -rsp $'Press any key to continue...\n' -n1 key
	fi
	while [[ "$PROFILE_NAME" == "" ]]
	do
		 clear
		 echo
		 echo
		 echo
		 echo " *** Please enter the profile name for this ESXi host. *** "
		 echo " *** If you do not know the profile name, please browse to ${CONFIGURATIONSERVER} *** "
		 echo " *** and create a profile for this host.*** "
		 echo
		 read -p "Configuration name: " PROFILE_NAME
		cd /tmp
		wget -O configuration.cfg "http://10.1.4.102/ks/${PROFILE_NAME}.cfg"
		if [[ -e /tmp/configuration.cfg ]]
		then
			HOSTNAME=$(cat /tmp/configuration.cfg   | grep "HOSTNAME"   | awk -F'[:]' '{print $2}')
			IPADDR=$(cat /tmp/configuration.cfg     | grep "IPADDRESS"  | awk -F'[:]' '{print $2}')
			NETMASK=$(cat /tmp/configuration.cfg    | grep "NETMASK"    | awk -F'[:]' '{print $2}')
			GATEWAY=$(cat /tmp/configuration.cfg    | grep "GATEWAY"    | awk -F'[:]' '{print $2}')
			DNS=$(cat /tmp/configuration.cfg        | grep "DNS_SERVER" | awk -F'[:]' '{print $2}')
			VLAN_ID=$(cat /tmp/configuration.cfg    | grep "VLAN_ID"    | awk -F'[:]' '{print $2}')	
			NIC_DEVICE=$(cat /tmp/configuration.cfg | grep "NIC_DEVICE" | awk -F'[:]' '{print $2}')
			
			NTPSERVER1=$(cat /tmp/configuration.cfg | grep "NTPSERVER1" | awk -F'[:]' '{print $2}')
			NTPSERVER2=$(cat /tmp/configuration.cfg | grep "NTPSERVER2" | awk -F'[:]' '{print $2}')
			DATACENTER=$(cat /tmp/configuration.cfg | grep "DATACENTER" | awk -F'[:]' '{print $2}')
			CLUSTER=$(cat /tmp/configuration.cfg | grep "CLUSTER" | awk -F'[:]' '{print $2}')
			VCENTERUSERNAME=$(cat /tmp/configuration.cfg | grep "VCENTERUSERNAME" | awk -F'[:]' '{print $2}')
			HOSTPASSWORD=$(cat /tmp/configuration.cfg | grep "HOSTPASSWORD" | awk -F'[:]' '{print $2}')
			VCENTERSERVER=$(cat /tmp/configuration.cfg | grep "VCENTERSERVER" | awk -F'[:]' '{print $2}')
			JOINVCENTER=$(cat /tmp/configuration.cfg | grep "JOINVCENTER" | awk -F'[:]' '{print $2}' | awk '{print tolower($0)}')
		fi
		#installation disk
		#
		#### GET THE INSTALATION DISK NAME #################
		
		ADAPTER=$(localcli storage core device list | grep "Display Name: Local ATA Disk (t10.ATA_____SATADOM" | awk -F'[(|)]' '{print $2}')
		
		#check to see if any of the parameters are empty
		if [[ "$HOSTNAME" == "" ]] || [[ "${IPADDR}" == "" ]] || [[ "${NETMASK}" == "" ]] || [[ "${GATEWAY}" == "" ]] || [[ "${DNS}" == "" ]] || [[ "${NIC_DEVICE}" == "" ]] 
		then
			echo
			echo
			echo "One or all of the required parameters has an empty value. Please review and correct the profile for this host."
			echo
			echo "Hostname = ${HOSTNAME}"
			echo "IP Address = ${IPADDR}"
			echo "Netmask = ${NETMASK}"
			echo "Gateway = ${GATEWAY}"
			echo "Network Adapter = ${NIC_DEVICE}"
			echo "VLAN ID = ${VLAN_ID}"			
			echo "DNS = ${DNS}"
			if [ "$JOINVCENTER" == "yes" ]
				then
					echo "vCenter Server = ${VCENTERSERVER}"
					echo "Data Center = ${DATACENTER}"
					echo "Cluster = ${CLUSTER}"
					echo "vCenter Username = ${VCENTERUSERNAME}"
					echo 
			fi
			
			
			PROFILE_NAME=""
			read -rsp $'Press any key to continue...\n' -n1 key
		fi
	done
	let COUNTER++
done


#I if the vlan id is set to zero, 
if [ "$VLAN_ID" == "0" ]
	then
		echo "network --bootproto=static --addvmportgroup=true --device=vmnic0 --ip=${IPADDR} --netmask=${NETMASK} --gateway=${GATEWAY} --nameserver=${DNS} --hostname=${HOSTNAME}" > /tmp/config
		echo "install   --disk=${ADAPTER} --overwritevmfs" >> /tmp/config
		echo "clearpart --drives=${ADAPTER} --overwritevmfs" >> /tmp/config
		echo "rootpw ${HOSTPASSWORD}"  >> /tmp/config
		#echo "install --firstdisk --overwritevmfs" >> /tmp/config
		#echo "clearpart --firstdisk --overwritevmfs" >> /tmp/config
		
else
	echo "network --bootproto=static --vlanid=${VLAN_ID} --addvmportgroup=true --device=${NIC_DEVICE} --ip=${IPADDR} --netmask=${NETMASK} --gateway=${GATEWAY} --nameserver=${DNS} --hostname=${HOSTNAME}" > /tmp/config
	echo "install   --disk=${ADAPTER} --overwritevmfs" >> /tmp/config
	echo "clearpart --drives=${ADAPTER} --overwritevmfs" >> /tmp/config
	echo "rootpw ${HOSTPASSWORD}"  >> /tmp/config
	#echo "install --firstdisk --overwritevmfs" >> /tmp/config
	#echo "clearpart --firstdisk --overwritevmfs" >> /tmp/config
fi


key=""
while [ "$key" != "q" -o "$key" != "Q" ] || [ "$key" != "i" -o "$key" != "I" ] ;
do
	clear
	echo
	echo
	echo "**********************************************************************"
	echo
	echo "================ Host Configuration Information ===================================="
	echo 
	echo "Hostname = ${HOSTNAME}"
	echo "IP Address = ${IPADDR}"
	echo "Netmask = ${NETMASK}"
	echo "Gateway = ${GATEWAY}"
	echo "Network Adapter = ${NIC_DEVICE}"
	echo "VLAN ID = ${VLAN_ID}"
	echo "DNS = ${DNS}"
	echo "NTP SERVER 1 = ${NTPSERVER1}"
	echo "NTP SERVER 2 = ${NTPSERVER2}"
	echo
	
	if [ "$JOINVCENTER" == "yes" ]
	then	
		echo "================ vCenter Information ================================="
		echo
		echo "vCenter Server   = ${VCENTERSERVER}"
		echo "Data Center      = ${DATACENTER}"
		echo "Cluster          = ${CLUSTER}"
		echo "vCenter Username = ${VCENTERUSERNAME}"
		echo
	fi
	echo "**********************************************************************"
	echo

	read -rsp $'Press [q] to quit and restart the system or press [i] to install...\n'  -n1 key
    if [ "$key" == "q" -o  "$key" == "Q" ]
		then
			echo "This host will be rebooted"
			reboot -f
			
		elif [ "$key" == "i" -o  "$key" == "I" ]
		then
			echo "Installation will continue with the provided parameters"
			
			break
    fi
      
done
chvt 2

###################################################################################

%post --interpreter=busybox

#copy the configuration file to a persistent storage for later use
cp /tmp/configuration.cfg /vmfs/volumes/datastore1


###################################################################################

%firstboot --interpreter=busybox

if [ ! -d "/tmp" ]; then
	mkdir /tmp
fi
cp /vmfs/volumes/datastore1/configuration.cfg /tmp
rm /vmfs/volumes/datastore1/configuration.cfg

HOST=$(hostname)
NEWDATASTORENAME="local-ds-${HOST}-1"
vim-cmd hostsvc/datastore/rename datastore1 "${NEWDATASTORENAME}"

# enable & start remote ESXi Shell  (SSH)
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh



# Disable IPv6 for VMkernel interfaces
esxcli system module parameters set -m tcpip4 -p ipv6=0

# Block VM guest BPDU packets, global configuration
esxcli system settings advanced set -o /Net/BlockGuestBPDU -i 1

## SATP CONFIGURATIONS ##
esxcli storage nmp satp set --satp VMW_SATP_SYMM --default-psp VMW_PSP_RR
esxcli storage nmp satp set --satp VMW_SATP_DEFAULT_AA --default-psp VMW_PSP_RR


#enable essential services
FIREWALL_SERVICES="syslog sshClient ntpClient httpClient"
for SERVICE in ${FIREWALL_SERVICES}
do
 esxcli network firewall ruleset set --ruleset-id ${SERVICE} --enabled yes
done


#enter maintenanceMode
esxcli system maintenanceMode set -e true




### NTP CONFIGURATIONS ###
NTP_SERVER_1=""
NTP_SERVER_2=""
if [[ -e /tmp/configuration.cfg ]]
then
NTP_SERVER_1=$(cat /tmp/configuration.cfg   | grep "NTPSERVER1"   | awk -F'[:]' '{print $2}')
NTP_SERVER_2=$(cat /tmp/configuration.cfg   | grep "NTPSERVER2"   | awk -F'[:]' '{print $2}')	
cat > /etc/ntp.conf << __NTP_CONFIG__
restrict default kod nomodify notrap noquerynopeer
restrict 127.0.0.1
server $NTP_SERVER_1
server $NTP_SERVER_2
__NTP_CONFIG__
/sbin/chkconfig ntpd on
fi


# backup ESXi configuration to persist changes
/sbin/auto-backup.sh
 
#reboot the host one more time to make sure all configuration performed.
esxcli system shutdown reboot -d 120 -r "rebooting after host configurations"


###############################################################################################

%firstboot --interpreter=python

#############################################JOIN VCENTER######################################
import sys,re,os,urllib,urllib2,base64,syslog,socket
configurationfile = "/tmp/configuration.cfg"

#First check to see if the host needs to be joined to vcenter
if os.path.isfile(configurationfile):
    for line in open(configurationfile):

        if "JOINVCENTER" in line:
            if (line.split(':')[1].lower() == 'yes'):
                print "yes"
            else:
                print("No")
                os.remove(configurationfile)
                sys.exit(1)
else:
    os.remove(configurationfile)
    sys.exit(1)

def GetvCenterServer():
    for line in open(configurationfile):
        if "VCENTERSERVER" in line:
            return line.split(':')[1].strip()

def GetCluster():
    datacenter = ""
    cluster = ""
    for line in open(configurationfile):
        if "DATACENTER" in line:
            datacenter = line.split(':')[1]
    for line in open(configurationfile):
        if "CLUSTER" in line:
            cluster = line.split(':')[1]
            destination = datacenter.strip() + "/host/" + cluster.strip()
            return destination


def GetvCenterServerUserName():
    for line in open(configurationfile):
        if "VCENTERUSERNAME" in line:
            return line.split(':')[1].strip()


def GetvCenterServerPassword():
    for line in open(configurationfile):
        if "VCENTERPASSWORD" in line:
            return line.split(':')[1].strip()


def GetHostPassword():
    for line in open(configurationfile):
        if "HOSTPASSWORD" in line:
            return line.split(':')[1].strip()



# awk '{ sub("\r$", ""); print }' configuration.cfg   > configuration.cfg



# Author: William Lam
# Website: www.virtuallyghetto.com
# Product: VMware ESXi
# Description: Python script to call into vSphere MOB to add ESXi host to VC
# Reference: http://www.virtuallyghetto.com/2011/03/how-to-automatically-add-esxi-host-to.html

# vCenter server
vcenter_server = GetvCenterServer()

# vCenter Cluster path
cluster = GetCluster()

# vCenter credentials using encoded base64 password
vc_username = GetvCenterServerUserName()
# vc_encodedpassword = "TXlTdXBlckR1cGVyU2VjcmV0UGFzc3dvcmRZbw=="
# vc_password = base64.b64decode(vc_encodedpassword)
vc_password = GetvCenterServerPassword()

# ESX(i) credentials using encoded base64 password
host_username = "root"
#host_encodedpasssword = "dm13YXJl"
host_password = GetHostPassword()

### DO NOT EDIT PAST HERE ###

# vCenter mob URL for findByInventoryPath
url = "https://" + vcenter_server + "/mob/?moid=SearchIndex&method=findByInventoryPath"

# Create global variables
global passman, authhandler, opener, req, page, page_content, nonce, headers, cookie, params, e_params, syslogGhetto, clusterMoRef

# syslog key for eaiser troubleshooting
syslogGhetto = 'GHETTO-JOIN-VC'

syslog.syslog(syslogGhetto + ' Starting joinvCenter process - ' + url)

# Code to build opener with HTTP Basic Authentication
try:
    passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
    passman.add_password(None, url, vc_username, vc_password)
    authhandler = urllib2.HTTPBasicAuthHandler(passman)
    opener = urllib2.build_opener(authhandler)
    urllib2.install_opener(opener)
except IOError, e:
    opener.close()
    syslog.syslog(syslogGhetto + ' Failed HTTP Basic Authentication!')
    sys.exit(1)
else:
    syslog.syslog(syslogGhetto + ' Succesfully built HTTP Basic Authentication')

# Code to capture required page data and cookie required for post back to meet CSRF requirements
# Thanks to user klich - http://communities.vmware.com/message/1722582#1722582
try:
    req = urllib2.Request(url)
    page = urllib2.urlopen(req)
    page_content = page.read()
except IOError, e:
    opener.close()
    syslog.syslog(syslogGhetto + ' Failed to retrieve MOB data -> ' + str(e.args))
    sys.exit(1)
else:
    syslog.syslog(syslogGhetto + ' Succesfully requested MOB data')

# regex to get the vmware-session-nonce value from the hidden form entry
reg = re.compile('name="vmware-session-nonce" type="hidden" value="?([^\s^"]+)"')
nonce = reg.search(page_content).group(1)

# get the page headers to capture the cookie
headers = page.info()
cookie = headers.get("Set-Cookie")

# Code to search for vCenter Cluster
params = {'vmware-session-nonce': nonce, 'inventoryPath': cluster}
e_params = urllib.urlencode(params)
req = urllib2.Request(url, e_params, headers={"Cookie": cookie})
page = urllib2.urlopen(req).read()

clusterMoRef = re.search('domain-c[0-9]*', page)
if clusterMoRef:
    syslog.syslog(syslogGhetto + ' Succesfully located cluster "' + cluster + '"!')
else:
    opener.close()
    syslog.syslog(syslogGhetto + ' Failed to find cluster "' + cluster + '"!')
    sys.exit(1)

# Code to compute SHA1 hash
cmd = "openssl x509 -sha1 -in /etc/vmware/ssl/rui.crt -noout -fingerprint"
tmp = os.popen(cmd)
tmp_sha1 = tmp.readline()
tmp.close()
s1 = re.split('=', tmp_sha1)
s2 = s1[1]
s3 = re.split('\n', s2)
sha1 = s3[0]

if sha1:
    syslog.syslog(syslogGhetto + ' Succesfully computed SHA1 hash: "' + sha1 + '"!')
else:
    opener.close()
    syslog.syslog(syslogGhetto + ' Failed to compute SHA1 hash!')
    sys.exit(1)

# Code to create ConnectHostSpec
xml = '<spec xsi:type="HostConnectSpec"><hostName>%hostname</hostName><sslThumbprint>%sha</sslThumbprint><userName>%user</userName><password>%pass</password><force>1</force></spec>'

# Code to extract IP Address to perform DNS lookup to add FQDN to vCenter
hostip = socket.gethostbyname(socket.gethostname())

if hostip:
    syslog.syslog(syslogGhetto + ' Successfully extracted IP Address ' + hostip.strip())
else:
    opener.close()
    syslog.syslog(syslogGhetto + ' Failed to extract IP Address!')
    sys.exit(1)

try:
    host = socket.getnameinfo((hostip, 0), 0)[0]
except IOError, e:
    syslog.syslog(syslogGhetto + ' Failed to perform DNS lookup for ' + hostipt.strip())
    sys.exit(1)
else:
    syslog.syslog(syslogGhetto + ' Successfully performed DNS lookup for ' + hostip.strip() + ' is ' + host)

xml = xml.replace("%hostname", host)
xml = xml.replace("%sha", sha1)
xml = xml.replace("%user", host_username)
xml = xml.replace("%pass", host_password)

# Code to join host to vCenter Cluster
try:
    url = "https://" + vcenter_server + "/mob/?moid=" + clusterMoRef.group() + "&method=addHost"
    params = {'vmware-session-nonce': nonce, 'spec': xml, 'asConnected': '1', 'resourcePool': '', 'license': ''}
    syslog.syslog(syslogGhetto + ' ' + url)
    e_params = urllib.urlencode(params)
    req = urllib2.Request(url, e_params, headers={"Cookie": cookie})
    page = urllib2.urlopen(req).read()
except IOError, e:
    opener.close()
    syslog.syslog(syslogGhetto + ' Failed to join vCenter!')
    syslog.syslog(syslogGhetto + ' HOSTNAME: ' + host)
    syslog.syslog(syslogGhetto + ' USERNAME: ' + host_username)
    # syslog.syslog(syslogGhetto + ' PASSWORD: ' + host_password)
    sys.exit(1)
else:
    syslog.syslog(syslogGhetto + ' Succesfully joined vCenter!')
    syslog.syslog(syslogGhetto + ' Logging off vCenter')
    url = "https://" + vcenter_server + "/mob/?moid=SessionManager&method=logout"
    params = {'vmware-session-nonce': nonce}
    e_params = urllib.urlencode(params)
    req = urllib2.Request(url, e_params, headers={"Cookie": cookie})
    page = urllib2.urlopen(req).read()
    sys.exit(0)
#Remove the configuration file
os.remove(configurationfile)

###############################################################################